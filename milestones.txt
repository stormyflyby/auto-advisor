*optional

1. Working Prototype

  1.1 Start Screen w/ Output
  Deliverable: A Start Screen that takes input and produces output (text file and stuff for main screen)
  Success criteria: Start Screen passes thorough unit tests
  Risks: Working with JSON, saving files, and loading files could pose a challenge
  Date: Already started, mostly done 4/3, done 4/5 (past due but almost done)

  1.2 Save File/Text File w/ Save Data
  Deliverable: Text output that doubles as input
  Success criteria: Save and Load buttons on the start screen work correctly
  Risks: Saving and loading files could need extensive research
  Date: Start 4/2, done 4/5 (past due but almost done)

  1.3 Main Screen
  Deliverable: Main Screen with all functions, including access to Course Description Screen
  Success criteria: Everyting on the main menu except the More Details buttons (for the course details screen) work
  Risks: This screen is complicated. We'll need most of the data structures completed before we can test/implement it properly.
  Date: Start 4/3, done 4/8

    1.3.1 Recommendations

    1.3.2 Displayable Groups of Classes

    *1.3.3 Filter Button

    1.3.4 Toggling Between Majors/Minors

    *1.3.5 Course Lookup

    1.3.6 Other Menu Functions (Info Displays)

  1.4 Data Structures
  Deliverable: Places to store the inputs and outputs of the different pages
  Success criteria: Not yet fully clear, but all data used in the program should have some code that stores it
  Risks: Potential difficulty testing this before we make the screens
  Date: Start 4/4, done 4/8

    1.4.1 Database for user info

    1.4.2 List of courses

  1.5 Course Details Screen
  Deliverable: Screen that displays course information, accessed from the Main screen
  Success Criteria: Course Details screen displays course information for every course used in the program and is functionally complete
  Risks: Few, though implementing course descriptions could take a while
  Date: Start 4/6, done 4/9

    1.5.1 Make Course Descriptions/Special Conditions

    1.5.2 Determine Prerequisites
    
2. Code Changes Complete
Description: After making the prototype, we'll go through the program, making changes to improve UX and add additional
  functionality specified in the SDD
Deliverable: A product that only needs debugging-related changes
Success criteria: Our QA Manager trusts the basic functionality of our program
Risks: If we're not careful, we could get stuck implementing a specific functionality and end up with a nonfunctional
  software when we could have feasibly stopped implementation earlier; implementation in this stage should be incremental,
  with each version functioning properly.
Date: Start 4/8, done 4/10

3. Unit Tests Complete
Description: Each part of the program should be tested thoroughly before being integrated into the system.
  This means searching for edge cases in the output by testing a variety of inputs.
Deliverable: Parts forming the whole program that all function individually
Success Criteria: all modules of the program pass testing
Risks: Incomplete testing of parts could require substantial debugging and code changes.
Date: Done 4/10

4. System Tests Fully Complete
Description: The software works fully as intended. We'll have system testing for the prototype
  and updated versions of the software. Test results should be satisfactory by the assignment due date.
Deliverable: The final software
Success criteria: Our QA Manager fully approves all aspects of the program or believes the program works reasonably well given our time constraints
Risks: We'll need to aim for fairly regular system tests to prevent large implementation problems.
Date: Done 4/11 (final due date)
